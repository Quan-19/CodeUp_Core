const User = require("../models/User");

const getAllUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
    res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });
  }
};

//x√≥a ng∆∞·ªùi d√πng
const deleteUser = async (req, res) => {
  const { userId } = req.params;
  try {
    const user = await User.findByIdAndDelete(userId);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }
    res.status(200).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi x√≥a ng∆∞·ªùi d√πng" });
  }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
const getUserById = async (req, res) => {
  const { id } = req.params;
  try {
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }
    res.status(200).json(user);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
  }
};

//s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng
const updateUser = async (req, res) => {
  const { userId } = req.params;
  const { username, bio } = req.body;
  const profilePicture = req.file ? `/uploads/${req.file.filename}` : null;

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // üîç Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ·ªü ng∆∞·ªùi d√πng kh√°c ch∆∞a
    if (username && username !== user.username) {
      const existingUser = await User.findOne({ username });
      if (existingUser && existingUser._id.toString() !== userId) {
        return res.status(400).json({ message: "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i" });
      }
      user.username = username;
    }

    if (bio) {
      user.bio = bio;
    }

    if (profilePicture) {
      user.profilePicture = profilePicture;
    }

    // üõ°Ô∏è B·ªè qua validation cho tr∆∞·ªùng role
    user.$ignore('role');
    
    await user.save();

    res.status(200).json({
      _id: user._id,
      username: user.username,
      email: user.email,
      role: user.role,
      bio: user.bio,
      profilePicture: user.profilePicture,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
    
    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    if (error.name === 'ValidationError') {
      return res.status(400).json({ 
        message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
        errors: error.errors 
      });
    }
    
    res.status(500).json({ 
      message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"
    });
  }
};

module.exports = {
  getAllUsers,
  deleteUser,
  getUserById,
  updateUser,
};